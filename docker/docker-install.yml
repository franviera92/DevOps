---
- hosts: localhost
  become: true
  gather_facts: yes
  #vars_files:
  #  - vars/default.yml

  tasks:
    - name: Config Swap
      shell: |
          sudo /bin/dd if=/dev/zero of=/var/swap.1 bs=1M count=2048
          sudo /sbin/mkswap /var/swap.1
          sudo /sbin/swapon /var/swap.1

    - name: Install aptitude using apt
      apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

    - name: Install required system packages
      apt: name={{ item }} state=latest update_cache=yes
      loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools','python-pip','htop']

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    #- name: Install pip
    #  apt:
    #   name: python-pip
    #   update_cache: yes
    #   state: present

    - name: Update apt and install docker-ce
      apt: update_cache=yes name=docker-ce state=latest

    - name: Install Docker Module for Python
      pip:
        name: docker

    - name: Create a network
      docker_network:
        name: kong-net

    - name: Pull kong image
      docker_image:
        name: "kong"
        source: pull
        #tag: 2.0.0rc1-centos
    
    - name: Pull postgres image
      docker_image:
        name: "postgres"
        source: pull
        tag: 9.6
    
    - name: Pull hello-world-rest
      docker_image:
        name: "thomaspoignant/hello-world-rest-json"
        source: pull
        #tag: 
    
    - name: Pull bennujobssh
      docker_image:
        name: "bennu/jobs:sh"
        source: pull
        #tag: 
    
    - name: Pull bennujobsmissing
      docker_image:
        name: "bennu/jobs:missing"
        source: pull
        #tag:
    
    - name: Start postgres
      docker_container:
        name: kong-database
        image: "postgres:9.6"
        networks:
          - name: "kong-net"
        #command: ["postgres"]
        #network_mode: bridge
        exposed_ports:
          - 5432
        published_ports:
          - 5432:5432
        state: started
        env:
            POSTGRES_USER: "kong"
            POSTGRES_DB: "kong"
        #volumes:
        #  - /opt/ebs_data:/var/lib/postgresql/data
    - name: Run the migrations with an ephemeral Kong container
      docker_container:
        name: migration
        image: "kong"
        networks:
          - name: "kong-net"
        command: kong migrations bootstrap
        state: started
        restart_policy: on-failure
        restart_retries: 5
        env:
            KONG_DATABASE: "postgres"
            KONG_PG_HOST: "kong-database"
            KONG_CASSANDRA_CONTACT_POINTS: "kong-database"
            #POSTGRESQL_USER: 'kong'
            #POSTGRESQL_PASSWORD: 'password'
            #POSTGRESQL_DATABASE: 'kong'
        #volumes:
        #  - /opt/ebs_data:/var/lib/postgresql/data
        #auto_remove: true
        links:
          - kong-database:kong-database

    - name: Start kong
      docker_container:
        name: kong
        image: "kong:latest"
        networks:
          - name: "kong-net"
        exposed_ports:
          - 8000
          - 8443
          - 8444
          - 8001
          - 7946
          #- 7946:7946/udp \
        published_ports:
          - 8000:8000
          - 8443:8443
          - 8001:8001
          - 8444:8444
          - 7946:7946/udp
        state: started
        restart_policy: on-failure
        restart_retries: 5
        env:
            KONG_DATABASE: 'postgres'
            KONG_PG_HOST: 'kong-database'
            KONG_CASSANDRA_CONTACT_POINTS: 'kong-database'
            KONG_PROXY_ACCESS_LOG: '/dev/stdout'
            KONG_ADMIN_ACCESS_LOG: '/dev/stdout'
            KONG_PROXY_ERROR_LOG: '/dev/stderr'
            KONG_ADMIN_ERROR_LOG: '/dev/stderr'
            KONG_ADMIN_LISTEN: '0.0.0.0:8001, 0.0.0.0:8444 ssl'

    #- name: Sleep 15
    #  command: sleep 15

    #- name: Config hello-world service
    #  shell: |
    #      curl -i -X POST \
    #        --url http://localhost:8001/services/ \
    #        --data 'name=helloworld' \
    #        --data 'url=http://{{ ansible_default_ipv4.address }}:8080'

    #- name: Config hello-world route
    #  shell: |
    #      curl -X POST \
    #        http://localhost:8001/services/helloworld/routes \
    #         -H 'Content-Type: application/json' \
    #         -d '{"hosts":["test.helloworld"]}'

    - name: Start hello-world-rest
      docker_container:
        name: hello-world-rest
        image: thomaspoignant/hello-world-rest-json
        networks:
          - name: "kong-net"
        #command: ["postgres"]
        #network_mode: bridge
        exposed_ports:
          - 8080
        published_ports:
          - 8080:8080
        state: started
        restart_policy: on-failure
        restart_retries: 5

    - name: Sleep 15
      command: sleep 15

    - name: Config hello-world service
      shell: |
          curl -i -X POST \
            --url http://localhost:8001/services/ \
            --data 'name=helloworld' \
            --data 'url=http://{{ ansible_default_ipv4.address }}:8080'

    - name: Config hello-world route
      shell: |
          curl -X POST \
            http://localhost:8001/services/helloworld/routes \
             -H 'Content-Type: application/json' \
             -d '{"hosts":["test.helloworld"]}'

    #- name: Sleep 5
    #  command: sleep 5

    - name: build the image bennu-jobs-sh
      docker_image:
        build:
          path: /home/ubuntu/bennu_jobs_sh
        name: bennu-jobs-sh
        source: build
        state: present

    - name: build the image bennu-jobs-missing
      docker_image:
        build:
          path: /home/ubuntu/bennu_jobs_missing
        name: bennu-jobs-missing
        source: build
        state: present
    
    - name: Start Bennu-jobs-sh
      docker_container:
        name: bennu-jobs-sh
        image: "bennu-jobs-sh"
        networks:
          - name: "kong-net"
        command: sleep 1d
        state: started

    - name: Start Bennu-jobs-missing
      docker_container:
        name: bennu-jobs-missing
        image: "bennu-jobs-missing"
        networks:
          - name: "kong-net"
        #command: sleep 1d
        state: started

    - name: Get infos on container BENNU SH
      docker_container_info:
        name: bennu-jobs-sh
      register: result

    - name: Does container exist?
      debug:
        msg: "The container {{ 'exists' if result.exists else 'does not exist' }}"

    - name: Print information about container BENNU SH
      debug:
        var: result.container
      when: result.exists

    - name: Get infos on container BENNU missing
      docker_container_info:
        name: bennu-jobs-missing
      register: result

    - name: Does container exist?
      debug:
        msg: "The container {{ 'exists' if result.exists else 'does not exist' }}"

    - name: Print information about container BENNU missing
      debug:
        var: result.container
      when: result.exists

    - name: Check if container is running
      shell: docker ps

    - name: Get hello-world with kong
      shell: |
          curl -i -X GET \
            --url http://localhost:8000/ \
            --header 'Host: test.helloworld'
  