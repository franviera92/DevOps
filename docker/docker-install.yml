---
- hosts: localhost
  become: true
  #vars_files:
  #  - vars/default.yml

  tasks:
    - name: Install aptitude using apt
      apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

    - name: Install required system packages
      apt: name={{ item }} state=latest update_cache=yes
      loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools','python-pip']

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    #- name: Install pip
    #  apt:
    #   name: python-pip
    #   update_cache: yes
    #   state: present

    - name: Update apt and install docker-ce
      apt: update_cache=yes name=docker-ce state=latest

    - name: Install Docker Module for Python
      pip:
        name: docker

    - name: Create a network
      docker_network:
        name: kong-net

    - name: Pull kong image
      docker_image:
        name: "kong"
        source: pull
        #tag: 2.0.0rc1-centos
    
    - name: Pull postgres image
      docker_image:
        name: "postgres"
        source: pull
        tag: 9.6
    
    - name: Start postgres
      docker_container:
        name: kong-database
        image: "postgres:9.6"
        networks:
          - name: "kong-net"
        #command: ["postgres"]
        #network_mode: bridge
        exposed_ports:
          - 5432
        published_ports:
          - 5432:5432
        state: started
        env:
            POSTGRES_USER: "kong"
            POSTGRES_DB: "kong"
        #volumes:
        #  - /opt/ebs_data:/var/lib/postgresql/data
    - name: Run the migrations with an ephemeral Kong container
      docker_container:
        name: migration
        image: "kong"
        networks:
          - name: "kong-net"
        command: kong migrations bootstrap
        state: started
        restart_policy: on-failure
        restart_retries: 5
        env:
            KONG_DATABASE: "postgres"
            KONG_PG_HOST: "kong-database"
            KONG_CASSANDRA_CONTACT_POINTS: "kong-database"
            #POSTGRESQL_USER: 'kong'
            #POSTGRESQL_PASSWORD: 'password'
            #POSTGRESQL_DATABASE: 'kong'
        #volumes:
        #  - /opt/ebs_data:/var/lib/postgresql/data
        #auto_remove: true
        links:
          - kong-database:kong-database

    - name: Start kong
      docker_container:
        name: kong
        image: "kong:latest"
        networks:
          - name: "kong-net"
        exposed_ports:
          - 8000
          - 8443
          - 8444
          - 8001
          - 7946
          #- 7946:7946/udp \
        published_ports:
          - 8000:8000
          - 8443:8443
          - 8001:8001
          - 8444:8444
          - 7946:7946/udp
        state: started
        restart_policy: on-failure
        restart_retries: 5
        env:
            KONG_DATABASE: 'postgres'
            KONG_PG_HOST: 'kong-database'
            KONG_CASSANDRA_CONTACT_POINTS: 'kong-database'
            KONG_PROXY_ACCESS_LOG: '/dev/stdout'
            KONG_ADMIN_ACCESS_LOG: '/dev/stdout'
            KONG_PROXY_ERROR_LOG: '/dev/stderr'
            KONG_ADMIN_ERROR_LOG: '/dev/stderr'
            KONG_ADMIN_LISTEN: '0.0.0.0:8001, 0.0.0.0:8444 ssl'